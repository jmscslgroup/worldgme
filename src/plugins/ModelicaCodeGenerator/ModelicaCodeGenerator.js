/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Tue Jun 18 2019 12:42:48 GMT-0700 (Pacific Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define(['plugin/PluginConfig','text!./metadata.json','plugin/PluginBase'], 
    function (PluginConfig,pluginMetadata,PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    function ModelicaCodeGenerator() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    ModelicaCodeGenerator.metadata = pluginMetadata;
    
    ModelicaCodeGenerator.prototype = Object.create(PluginBase.prototype);
    ModelicaCodeGenerator.prototype.constructor = ModelicaCodeGenerator;

    ModelicaCodeGenerator.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.

        var self =  this,
                    nodeObject;
//            core = this.core,
//            logger = this.logger,
//            modelJson = {name: '',components: [],connections: []},
//        activeNode;
        
//        function atComponent(node) {

//        var componentData = {
//            URI: '',
//            name: '', 
//            parameters: {}
//        };

//        componentData.URI = core.getAttribute(node, 'ModelicaURI');
//        componentData.name = core.getAttribute(node, 'name');
        
//        modelJson.components.push(componentData);
//        }
        
        
//        function atConnection(nodes, node) {
//      var connData = {
//                src: '',
//                dst: ''
//             };
             
//             var srcPath = core.getPointerPath(node, 'src');
//             var dstPath = core.getPointerPath(node, 'dst');
             
//             if (srcPath && dstPath) {
//                var srcNode = nodes[srcPath];
//                var dstNode = nodes[dstPath];
                
//                var srcParent = core.getParent(srcNode);
//                var dstParent = core.getParent(dstNode);
                
//                connData.src = core.getAttribute(srcParent, 'name') + '.' + core.getAttribute(srcNode, 'name');
//                connData.dst = core.getAttribute(dstParent, 'name') + '.' + core.getAttribute(dstNode, 'name');
                
//                modelJson.connections.push(connData);

//}


//}

    self.logger.debug('This is a debug message.');
    self.logger.info('This is an info message.');
    self.logger.warn('This is a warning message.');
    self.logger.error('This is an error message.');


       this.loadNodeMap(this.activeNode)
            .then(function(nodes) {
                var nodePath, node;
                for(nodePath in nodes)
                    {self.logger.info(self.core.getAttribute(nodes[nodePath], 'name'), 'has path', nodePath);}
                
                modelJson.name = core.getAttribute(activeNode, 'name');
                
                var childrenPaths = core.getChildrenPaths(activeNode);
                
                for (var i = 0; i < childrenPaths.length; i+=1){
                node = nodes[childrenPaths[i]];
                    if(self.isMetaTypeOf(node, self.META.Component)) 
                        {atComponent(node);} 
                    else if (self.isMetaTypeOf(node, self.META.Connection))
                        {atConnection(nodes, node);}
                }
                
                self.logger.info('Extracted data:\n', JSON.stringify(modelJson, null, 2));
                
                this.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function(err){
                // Result success is false at invocation.
                this.logger.error(err.stack);
                callback(err, self.result);
            });
    };

    return ModelicaCodeGenerator;
});
